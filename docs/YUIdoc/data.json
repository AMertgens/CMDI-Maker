{
    "project": {
        "name": "CMDI Maker",
        "description": "A tool for easily creating XML documents on the basis of handsome forms.",
        "version": "2.10",
        "url": "http://cmdi-maker.uni-koeln.de/",
        "logo": "../yuidoc_header_image.png"
    },
    "files": {
        "src\\js\\core\\app.gui.js": {
            "name": "src\\js\\core\\app.gui.js",
            "modules": {},
            "classes": {
                "APP.GUI": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\core\\app.gui.pager.js": {
            "name": "src\\js\\core\\app.gui.pager.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\core\\app.js": {
            "name": "src\\js\\core\\app.js",
            "modules": {
                "CORE": 1
            },
            "classes": {
                "APP": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\core\\app.save_and_recall.js": {
            "name": "src\\js\\core\\app.save_and_recall.js",
            "modules": {},
            "classes": {
                "APP.save_and_recall": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\alertify.js": {
            "name": "src\\js\\alertify.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\js\\helpers.js": {
            "name": "src\\js\\helpers.js",
            "modules": {
                "HELPERS": 1
            },
            "classes": {
                "HELPERS": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "CORE": {
            "name": "CORE",
            "submodules": {},
            "classes": {
                "APP.GUI": 1,
                "APP": 1,
                "APP.save_and_recall": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\js\\core\\app.save_and_recall.js",
            "line": 18,
            "description": "The main module for the app."
        },
        "HELPERS": {
            "name": "HELPERS",
            "submodules": {},
            "classes": {
                "HELPERS": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\js\\helpers.js",
            "line": 23,
            "description": "Helper functions. These are available in the global namespace!"
        }
    },
    "classes": {
        "APP.GUI": {
            "name": "APP.GUI",
            "shortname": "APP.GUI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "CORE",
            "file": "src\\js\\core\\app.gui.js",
            "line": 17,
            "description": "A sub module of APP that deals with the GUI."
        },
        "APP": {
            "name": "APP",
            "shortname": "APP",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "CORE",
            "namespace": "",
            "file": "src\\js\\core\\app.js",
            "line": 23,
            "description": "The main module for the app."
        },
        "APP.save_and_recall": {
            "name": "APP.save_and_recall",
            "shortname": "APP.save_and_recall",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "CORE",
            "namespace": "",
            "file": "src\\js\\core\\app.save_and_recall.js",
            "line": 18,
            "description": "A sub module of APP that deals with saving and recalling APP and environment states and data."
        },
        "HELPERS": {
            "name": "HELPERS",
            "shortname": "HELPERS",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HELPERS",
            "namespace": "",
            "file": "src\\js\\helpers.js",
            "line": 23,
            "description": "Helper functions. These are available in the global namespace!"
        }
    },
    "classitems": [
        {
            "file": "src\\js\\core\\app.gui.js",
            "line": 28,
            "description": "Displays a busy indicator. (This feature is in pre-alpha state. Do not use it yet.)",
            "params": [
                {
                    "name": "parent",
                    "description": "Parent element"
                }
            ],
            "itemtype": "method",
            "name": "showBusyIndicator",
            "class": "APP.GUI"
        },
        {
            "file": "src\\js\\core\\app.gui.js",
            "line": 54,
            "description": "Hides the busy indicator again.  (This feature is in pre-alpha state. Do not use it yet.)",
            "itemtype": "method",
            "name": "showBusyIndicator",
            "class": "APP.GUI"
        },
        {
            "file": "src\\js\\core\\app.gui.js",
            "line": 67,
            "description": "Displays a busy indicator. (This feature is in pre-alpha state. Do not use it yet.)",
            "itemtype": "method",
            "name": "setIcon",
            "params": [
                {
                    "name": "element",
                    "description": "DOM element of the icon (has to be be img)"
                },
                {
                    "name": "icon_id",
                    "description": "Name of the icon."
                }
            ],
            "class": "APP.GUI"
        },
        {
            "file": "src\\js\\core\\app.gui.js",
            "line": 80,
            "description": "Sets a value to a form element",
            "itemtype": "method",
            "name": "setFormValue",
            "params": [
                {
                    "name": "element_id",
                    "description": "ID of DOM element"
                },
                {
                    "name": "value",
                    "description": "Value"
                },
                {
                    "name": "open_vocabulary",
                    "description": "If element is an open vocabulary, it should be provided here, too."
                }
            ],
            "class": "APP.GUI"
        },
        {
            "file": "src\\js\\core\\app.gui.js",
            "line": 151,
            "description": "Creates a text input element with heading. Used a lot by APP.forms",
            "itemtype": "method",
            "name": "makeTextInput",
            "params": [
                {
                    "name": "parent",
                    "description": "Parent element in DOM"
                },
                {
                    "name": "title",
                    "description": "Title or heading that is displayed above the form element",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "Name of the input element",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "ID of the input element",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "Value",
                    "type": "String"
                },
                {
                    "name": "hover",
                    "description": "HTML Title Element value. This value is displayed as a tooltip when mouse is hovering above the element.",
                    "type": "String"
                },
                {
                    "name": "maxLength",
                    "description": "Maximum length of chars in element."
                }
            ],
            "return": {
                "description": "Element that is to be created.",
                "type": "Object"
            },
            "class": "APP.GUI"
        },
        {
            "file": "src\\js\\core\\app.gui.js",
            "line": 188,
            "description": "Creates a text input element with heading. The element can be used to type year numbers.",
            "itemtype": "method",
            "name": "makeYearInput",
            "params": [
                {
                    "name": "parent",
                    "description": "Parent element in DOM"
                },
                {
                    "name": "title",
                    "description": "Title or heading that is displayed above the form element",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "Name of the input element",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "ID of the input element",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "Value",
                    "type": "String"
                },
                {
                    "name": "hover",
                    "description": "HTML Title Element value. This value is displayed as a tooltip when mouse is hovering above the element."
                }
            ],
            "return": {
                "description": "Element that is to be created.",
                "type": "Object"
            },
            "class": "APP.GUI"
        },
        {
            "file": "src\\js\\core\\app.gui.js",
            "line": 222,
            "description": "Creates an input element of type \"checkbox\" with a heading above the element.",
            "itemtype": "method",
            "name": "makeCheckbox",
            "params": [
                {
                    "name": "parent",
                    "description": "Parent element in DOM",
                    "type": "Object"
                },
                {
                    "name": "title",
                    "description": "Title or heading that is displayed above the form element",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "Name of the input element",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "ID of the input element",
                    "type": "String"
                },
                {
                    "name": "checked",
                    "description": "Set to true if the checkbox is to be checked.",
                    "type": "Boolean"
                },
                {
                    "name": "hover",
                    "description": "HTML Title Element value. This value is displayed as a tooltip when mouse is hovering above the element.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Element that is to be created.",
                "type": "Object"
            },
            "class": "APP.GUI"
        },
        {
            "file": "src\\js\\core\\app.gui.js",
            "line": 252,
            "description": "Creates a user input field where the user either can select an option from a given vocabulary or type in a custom option. As always, there is a heading above the element.",
            "itemtype": "method",
            "name": "openVocabulary",
            "params": [
                {
                    "name": "parent",
                    "description": "Parent element in DOM",
                    "type": "Object"
                },
                {
                    "name": "title",
                    "description": "Title or heading that is displayed above the form element",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "Name of the input elements",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "ID of the input elements. Note that both select and input will have the same ID.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Array with strings. Vocabulary of values."
                },
                {
                    "name": "value",
                    "description": "Value of the input field. Note that if the value is part of options, the select element will be used, otherwise the text input element.",
                    "type": "String"
                },
                {
                    "name": "hover",
                    "description": "HTML Title Element value. This value is displayed as a tooltip when mouse is hovering above the element.",
                    "type": "String"
                },
                {
                    "name": "className",
                    "description": "Class name of the select and input elements.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns an object that contains both the select and the input element. Keys are \"text\" and \"select\".",
                "type": "Object"
            },
            "class": "APP.GUI"
        },
        {
            "file": "src\\js\\core\\app.gui.js",
            "line": 345,
            "description": "Creates a language search form, where the user can search a language or type in an ISO639-3 code to add a language somewhere.",
            "itemtype": "method",
            "name": "makeLanguageSearchForm",
            "params": [
                {
                    "name": "Parent",
                    "description": "element in DOM",
                    "type": "Object"
                },
                {
                    "name": "element_id_prefix",
                    "description": "Prefix of the IDs of all elements that are created here.",
                    "type": "String"
                },
                {
                    "name": "no_br",
                    "description": "Set true, if there shall be no line break between the search input part and the add ISO part.",
                    "type": "Boolean"
                },
                {
                    "name": "no_display",
                    "description": "Set true, if there shall no display element be created that could contain added languages to display.",
                    "type": "Boolean"
                },
                {
                    "name": "on_select",
                    "description": "Callback function that is called, when the user adds a language.",
                    "type": "Function"
                }
            ],
            "class": "APP.GUI"
        },
        {
            "file": "src\\js\\core\\app.gui.js",
            "line": 447,
            "description": "Checks if an ISO code is reserved for local use. These are all ISO codes between \"qaa\" and \"qtz\"",
            "itemtype": "method",
            "name": "isISOCodeReservedForLocalUse",
            "params": [
                {
                    "name": "code",
                    "description": "ISO Code",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True or false.",
                "type": "Boolean"
            },
            "class": "APP.GUI"
        },
        {
            "file": "src\\js\\core\\app.gui.js",
            "line": 477,
            "description": "Creates a DOM element containing an icon based on the available icons in src/img/icons.",
            "itemtype": "method",
            "name": "icon",
            "params": [
                {
                    "name": "parent",
                    "description": "Parent DOM element",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": "ID of the element.",
                    "type": "String"
                },
                {
                    "name": "className",
                    "description": "Class name of the element.",
                    "type": "String"
                },
                {
                    "name": "icon",
                    "description": "Name of the icon, e.g. \"star\" or \"about\". Must be one of the icons in src/img/icons, but without file ending.",
                    "type": "String"
                },
                {
                    "name": "onclick",
                    "description": "Callback function that is called when the icon is clicked upon.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "DOM object of icon.",
                "type": "Object"
            },
            "class": "APP.GUI"
        },
        {
            "file": "src\\js\\core\\app.gui.js",
            "line": 501,
            "description": "Copies the value of a form element to another form element, no matter if elements are select or input, type=text.",
            "itemtype": "method",
            "name": "copyField",
            "params": [
                {
                    "name": "target_element_name",
                    "description": "Name of the target element.",
                    "type": "String"
                },
                {
                    "name": "source_element_name",
                    "description": "Name of the source element.",
                    "type": "String"
                }
            ],
            "class": "APP.GUI"
        },
        {
            "file": "src\\js\\core\\app.gui.js",
            "line": 554,
            "description": "Changes the type of input element for an Open Vocabulary input field.",
            "itemtype": "method",
            "name": "changeOVInput",
            "params": [
                {
                    "name": "id",
                    "description": "ID of the element.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "If the field changes from text input to select, this is the vocabulary for the select.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns the newly created DOM node.",
                "type": "Object"
            },
            "class": "APP.GUI"
        },
        {
            "file": "src\\js\\core\\app.gui.js",
            "line": 601,
            "description": "Creates a select element in the DOM. As always, there is a heading above the element.",
            "itemtype": "method",
            "name": "makeSelect",
            "params": [
                {
                    "name": "parent",
                    "description": "Parent element in DOM",
                    "type": "Object"
                },
                {
                    "name": "title",
                    "description": "Title or heading that is displayed above the form element",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "Name of the input element.",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "ID of the input element.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Vocabulary of values.",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "Value of the select.",
                    "type": "String"
                },
                {
                    "name": "hover",
                    "description": "HTML Title Element value. This value is displayed as a tooltip when mouse is hovering above the element.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the newly created DOM node.",
                "type": "Object"
            },
            "class": "APP.GUI"
        },
        {
            "file": "src\\js\\core\\app.gui.js",
            "line": 648,
            "description": "Creates input elements to input a date. As always, there is a title above the form element.",
            "itemtype": "method",
            "name": "makeDateInput",
            "params": [
                {
                    "name": "parent",
                    "description": "Parent element in DOM",
                    "type": "Object"
                },
                {
                    "name": "title",
                    "description": "Title or heading that is displayed above the form element",
                    "type": "String"
                },
                {
                    "name": "name_prefix",
                    "description": "Prefix that is used for all names of DOM elements to be created.",
                    "type": "String"
                },
                {
                    "name": "id_prefix",
                    "description": "Prefix that is used for all IDs of DOM elements to be created.",
                    "type": "String"
                },
                {
                    "name": "y_value",
                    "description": "Value of the year element.",
                    "type": "String"
                },
                {
                    "name": "m_value",
                    "description": "Value of the month element.",
                    "type": "String"
                },
                {
                    "name": "d_value",
                    "description": "Value of the day element.",
                    "type": "String"
                },
                {
                    "name": "hover",
                    "description": "HTML Title Element value. This value is displayed as a tooltip when mouse is hovering above the element.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns an object containing references to the newly created DOM nodes. Keys are \"year\", \"month\" and \"day\".",
                "type": "Object"
            },
            "class": "APP.GUI"
        },
        {
            "file": "src\\js\\core\\app.gui.js",
            "line": 702,
            "description": "Creates a textarea. As always, there is a title above the form element.",
            "itemtype": "method",
            "name": "makeTextarea",
            "params": [
                {
                    "name": "t_cols",
                    "description": "Number of columns of the textarea.",
                    "type": "Number"
                },
                {
                    "name": "t_rows",
                    "description": "Number of rows of the textarea.",
                    "type": "Number"
                },
                {
                    "name": "parent",
                    "description": "Parent element in DOM.",
                    "type": "Object"
                },
                {
                    "name": "title",
                    "description": "Title or heading that is displayed above the form element",
                    "type": "String"
                },
                {
                    "name": "t_name",
                    "description": "Name of the textarea element.",
                    "type": "String"
                },
                {
                    "name": "t_id",
                    "description": "ID of the textarea element.",
                    "type": "String"
                },
                {
                    "name": "t_class",
                    "description": "Class of the textarea element.",
                    "type": "String"
                },
                {
                    "name": "t_value",
                    "description": "Value of the element.",
                    "type": "String"
                },
                {
                    "name": "hover",
                    "description": "HTML Title Element value. This value is displayed as a tooltip when mouse is hovering above the element.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the textarea DOM node.",
                "type": "Object"
            },
            "class": "APP.GUI"
        },
        {
            "file": "src\\js\\core\\app.gui.js",
            "line": 739,
            "description": "Hides all functions from the user.",
            "itemtype": "method",
            "name": "makeAllFunctionsInvisible",
            "class": "APP.GUI"
        },
        {
            "file": "src\\js\\core\\app.gui.js",
            "line": 752,
            "description": "Hides the div wrapper that contains the functions.",
            "itemtype": "method",
            "name": "hideFunctionsDIV",
            "class": "APP.GUI"
        },
        {
            "file": "src\\js\\core\\app.gui.js",
            "line": 768,
            "description": "Shows the div wrapper that contains the functions.",
            "itemtype": "method",
            "name": "showFunctionsDIV",
            "class": "APP.GUI"
        },
        {
            "file": "src\\js\\core\\app.gui.js",
            "line": 784,
            "description": "Shows the div wrapper that contains the functions.",
            "itemtype": "method",
            "name": "showFunctionsForView",
            "params": [
                {
                    "name": "module",
                    "description": "Module of which the functions are to be displayed.",
                    "type": "Object"
                }
            ],
            "class": "APP.GUI"
        },
        {
            "file": "src\\js\\core\\app.gui.js",
            "line": 817,
            "description": "Renders a function if it is not disabled, i.e. part of the array APP.environments.disabled_functions",
            "itemtype": "method",
            "name": "renderFunctionIfNotDisabled",
            "params": [
                {
                    "name": "function",
                    "description": "CMDI Maker Function object. Note that the parameter is an object, not a function.",
                    "type": "Object"
                }
            ],
            "class": "APP.GUI"
        },
        {
            "file": "src\\js\\core\\app.gui.js",
            "line": 846,
            "description": "Renders a function.",
            "itemtype": "method",
            "name": "renderFunction",
            "params": [
                {
                    "name": "function",
                    "description": "CMDI Maker Function object. Note that the parameter is an object, not a function.",
                    "type": "Object"
                }
            ],
            "class": "APP.GUI"
        },
        {
            "file": "src\\js\\core\\app.gui.js",
            "line": 872,
            "description": "Switches a CMDI Maker toggle switch from on to off or the other way aroud.",
            "itemtype": "method",
            "name": "switchToggle",
            "params": [
                {
                    "name": "input",
                    "description": "DOM Node of the toggle.",
                    "type": "Object"
                }
            ],
            "class": "APP.GUI"
        },
        {
            "file": "src\\js\\core\\app.gui.js",
            "line": 889,
            "description": "Sets CMDI Maker toggle switch to on or off.",
            "itemtype": "method",
            "name": "setToggleValue",
            "params": [
                {
                    "name": "input",
                    "description": "DOM Node of the toggle.",
                    "type": "Object"
                },
                {
                    "name": "value",
                    "description": "True = toggle on, false = toggle off.",
                    "type": "Boolean"
                }
            ],
            "class": "APP.GUI"
        },
        {
            "file": "src\\js\\core\\app.gui.js",
            "line": 912,
            "description": "Shows a frame on the screen where the user can select one of multiple values. For this selection frame, a new view is created, if it does not exist yet.",
            "itemtype": "method",
            "name": "showSelectFrame",
            "params": [
                {
                    "name": "options",
                    "description": "Options to be displayed. Note, that the values in this array are not displayed on screen.",
                    "type": "Array"
                },
                {
                    "name": "titles",
                    "description": "Titles of the options. Titles are displayed on screen.",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "Function to be called, when the user clicks on one option. The respective option from the options array is passed here as parameter.",
                    "type": "Function"
                },
                {
                    "name": "title",
                    "description": "Title of the selection frame.",
                    "type": "String"
                },
                {
                    "name": "subtitle",
                    "description": "Subtitle of the selection frame.",
                    "type": "String"
                }
            ],
            "class": "APP.GUI"
        },
        {
            "file": "src\\js\\core\\app.gui.js",
            "line": 972,
            "description": "Scrolls the content to the top.",
            "itemtype": "method",
            "name": "scrollTop",
            "class": "APP.GUI"
        },
        {
            "file": "src\\js\\core\\app.gui.js",
            "line": 1046,
            "description": "Highlights a view icon, e.g. a workflow item. Unhighlights all the other view icons.",
            "itemtype": "method",
            "name": "highlightViewIcon",
            "params": [
                {
                    "name": "id",
                    "description": "Module identity. NOT the id of a DOM node.",
                    "type": "String"
                }
            ],
            "class": "APP.GUI"
        },
        {
            "file": "src\\js\\core\\app.gui.pager.js",
            "line": 70,
            "class": "APP"
        },
        {
            "file": "src\\js\\core\\app.js",
            "line": 99,
            "description": "Initializes the app. This method is called on \"DOMContentLoaded\".",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "no_recall",
                    "description": "If true, the app will not attempt to recall saved data from the application cache.",
                    "type": "Boolean"
                }
            ],
            "static": 1,
            "class": "APP",
            "module": "CORE"
        },
        {
            "file": "src\\js\\core\\app.js",
            "line": 175,
            "description": "Tries to retrieve the APP language by looking at what language the browser is set (navigator.language).",
            "itemtype": "method",
            "name": "getActiveLanguageByNavigatorLanguageOrTakeDefault",
            "return": {
                "description": "LanguagePack Returns an APP LanguagePack, that matches the browser language or returns the default LanguagePack of the APP.",
                "type": "Object"
            },
            "static": 1,
            "class": "APP",
            "module": "CORE"
        },
        {
            "file": "src\\js\\core\\app.js",
            "line": 323,
            "description": "Tries to get a term in a specific language. This method is called by environments each time a language dependent term is displayed by an environment.",
            "itemtype": "method",
            "name": "getTermInActiveLanguage",
            "params": [
                {
                    "name": "LanguagePacksArray",
                    "description": "An array with all the available LanguagePacks of the environment.",
                    "type": "Array"
                },
                {
                    "name": "arg1",
                    "description": "First key in LanguagePack to look at.",
                    "type": "String"
                },
                {
                    "name": "arg2",
                    "description": "Second key in LanguagePack to look at.",
                    "type": "String"
                },
                {
                    "name": "arg3",
                    "description": "Third key in LanguagePack to look at.",
                    "type": "String"
                },
                {
                    "name": "arg4",
                    "description": "Fourth key in LanguagePack to look at.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "term Returns the term in the specific language. If there is no term in that language, the term in the default language is returned. If there is no term in the default language, APP.CONF.language_error_placeholder is returned.",
                "type": "String"
            },
            "static": 1,
            "class": "APP",
            "module": "CORE"
        },
        {
            "file": "src\\js\\core\\app.js",
            "line": 532,
            "description": "Checks if the app is started for the first time or not and fires a fitting welcome note. (TO DO: The check in this method should be replaced by a check, if a data object can be retrieved or not.",
            "itemtype": "method",
            "name": "checkIfFirstStart",
            "static": 1,
            "class": "APP",
            "module": "CORE"
        },
        {
            "file": "src\\js\\core\\app.js",
            "line": 562,
            "description": "Shows a log message to the user",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "message",
                    "description": "The message to display.",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "Type of the log message resulting in different colors (\"error\" => red flag, \"success\" => green flag, else: black flag).",
                    "type": "String"
                }
            ],
            "static": 1,
            "class": "APP",
            "module": "CORE"
        },
        {
            "file": "src\\js\\core\\app.js",
            "line": 580,
            "description": "Shows a confirm dialog to the user",
            "itemtype": "method",
            "name": "confirm",
            "params": [
                {
                    "name": "message",
                    "description": "The message to display.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "The function to be called when the user makes a decision. An bool value is passed to this function: true when user pressed ok, false when user pressed cancel.",
                    "type": "Function"
                },
                {
                    "name": "ok_label",
                    "description": "The text of the OK button.",
                    "type": "Function"
                },
                {
                    "name": "cancel_label",
                    "description": "The text of the cancel button.",
                    "type": "Function"
                }
            ],
            "static": 1,
            "class": "APP",
            "module": "CORE"
        },
        {
            "file": "src\\js\\core\\app.js",
            "line": 601,
            "description": "Shows an alert message to the user.",
            "itemtype": "method",
            "name": "alert",
            "params": [
                {
                    "name": "message",
                    "description": "The message to display.",
                    "type": "String"
                }
            ],
            "static": 1,
            "class": "APP",
            "module": "CORE"
        },
        {
            "file": "src\\js\\core\\app.js",
            "line": 618,
            "description": "This method deletes all saved data and reloads the app. It is quite DANGEROUS!",
            "itemtype": "method",
            "name": "hard_reset",
            "static": 1,
            "class": "APP",
            "module": "CORE"
        },
        {
            "file": "src\\js\\core\\app.js",
            "line": 632,
            "description": "This method changes the view of the app. A view can be a view of the app, \nor of a module of an environment.",
            "itemtype": "method",
            "name": "view",
            "params": [
                {
                    "name": "module_or_id",
                    "description": "It can be a module or an id of a view element.",
                    "type": "Mixed"
                }
            ],
            "class": "APP",
            "module": "CORE"
        },
        {
            "file": "src\\js\\core\\app.js",
            "line": 719,
            "description": "Saves the current state of the APP and the active environment.",
            "itemtype": "method",
            "name": "save",
            "static": 1,
            "class": "APP",
            "module": "CORE"
        },
        {
            "file": "src\\js\\core\\app.js",
            "line": 731,
            "description": "Saves a file with text content. For the user, it looks like a download.",
            "itemtype": "method",
            "name": "saveTextfile",
            "params": [
                {
                    "name": "text",
                    "description": "Content of file as string",
                    "type": "String"
                },
                {
                    "name": "filename",
                    "description": "Filename",
                    "type": "String"
                },
                {
                    "name": "mime_type",
                    "description": "Mime type for download",
                    "type": "String"
                }
            ],
            "static": 1,
            "class": "APP",
            "module": "CORE"
        },
        {
            "file": "src\\js\\core\\app.js",
            "line": 754,
            "description": "Gets all XML strings from output textareas, makes files and zips these files into one. For the user, it looks like a download of a ZIP file.",
            "itemtype": "method",
            "name": "zipAllOutputFiles",
            "static": 1,
            "class": "APP",
            "module": "CORE"
        },
        {
            "file": "src\\js\\core\\app.js",
            "line": 815,
            "description": "Gets all XML strings from output textareas, makes files and saves them. For the user, it looks like several downloads.",
            "itemtype": "method",
            "name": "saveAllOutputFiles",
            "static": 1,
            "class": "APP",
            "module": "CORE"
        },
        {
            "file": "src\\js\\core\\app.js",
            "line": 833,
            "description": "Recalls and sets the app state. If recall_object.active_environment_id is given, it tries to load that environment and recalls the environment state too.\nIf environment_data is undefined, it tries to get the recall data for that environment by checking the browser database.",
            "itemtype": "method",
            "name": "recall",
            "params": [
                {
                    "name": "recall_object",
                    "description": "Object with the state of the app.",
                    "type": "Mixed"
                },
                {
                    "name": "environment_data",
                    "description": "Object with the state of an environment to be loaded.",
                    "type": "Mixed"
                }
            ],
            "static": 1,
            "class": "APP",
            "module": "CORE"
        },
        {
            "file": "src\\js\\core\\app.js",
            "line": 880,
            "description": "Changes the language of the app. Reloads the app, so that changes are effective immediately.",
            "itemtype": "method",
            "name": "changeLanguage",
            "params": [
                {
                    "name": "index",
                    "description": "Index of the language in the array my.languages",
                    "type": "Integer"
                }
            ],
            "static": 1,
            "class": "APP",
            "module": "CORE"
        },
        {
            "file": "src\\js\\core\\app.js",
            "line": 894,
            "description": "Searches for a language entry in LanguageIndex.js. Displays a screen where the user can select a language from the results. Selection will be passed as parameter to on_select",
            "itemtype": "method",
            "name": "doStandardLanguageSearch",
            "params": [
                {
                    "name": "input",
                    "description": "Input string",
                    "type": "String"
                },
                {
                    "name": "on_select",
                    "description": "Method to be called when the user selects a language. Selection will be passed as parameter.",
                    "type": "Function"
                }
            ],
            "static": 1,
            "class": "APP",
            "module": "CORE"
        },
        {
            "file": "src\\js\\core\\app.save_and_recall.js",
            "line": 51,
            "description": "Tries to get environment data from browser database.",
            "itemtype": "method",
            "name": "getRecallDataForEnvironment",
            "params": [
                {
                    "name": "environment",
                    "description": "An environment object.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "form_object Environment state object.",
                "type": "Mixed"
            },
            "static": 1,
            "class": "APP.save_and_recall",
            "module": "CORE"
        },
        {
            "file": "src\\js\\core\\app.save_and_recall.js",
            "line": 81,
            "description": "Sets the autosave interval of the app.",
            "itemtype": "method",
            "name": "setAutosaveInterval",
            "params": [
                {
                    "name": "time",
                    "description": "Time in seconds",
                    "type": "Integer"
                }
            ],
            "static": 1,
            "class": "APP.save_and_recall",
            "module": "CORE"
        },
        {
            "file": "src\\js\\core\\app.save_and_recall.js",
            "line": 116,
            "description": "Sets the state of the active environment.",
            "itemtype": "method",
            "name": "recallEnvironmentData",
            "params": [
                {
                    "name": "recall_object",
                    "description": "Environment state object",
                    "type": "Mixed"
                }
            ],
            "static": 1,
            "class": "APP.save_and_recall",
            "module": "CORE"
        },
        {
            "file": "src\\js\\core\\app.save_and_recall.js",
            "line": 141,
            "description": "Deletes all data in the browser database.",
            "itemtype": "method",
            "name": "deleteAllData",
            "static": 1,
            "class": "APP.save_and_recall",
            "module": "CORE"
        },
        {
            "file": "src\\js\\core\\app.save_and_recall.js",
            "line": 153,
            "description": "Deletes the saved data of the active environment from the browser database.",
            "itemtype": "method",
            "name": "deleteEnvironmentData",
            "static": 1,
            "class": "APP.save_and_recall",
            "module": "CORE"
        },
        {
            "file": "src\\js\\core\\app.save_and_recall.js",
            "line": 174,
            "description": "Saves current app and environment states in the browser database and notifies the user about that..",
            "itemtype": "method",
            "name": "userSave",
            "static": 1,
            "class": "APP.save_and_recall",
            "module": "CORE"
        },
        {
            "file": "src\\js\\core\\app.save_and_recall.js",
            "line": 187,
            "description": "Saves current app and environment states in the browser database.",
            "itemtype": "method",
            "name": "save",
            "static": 1,
            "class": "APP.save_and_recall",
            "module": "CORE"
        },
        {
            "file": "src\\js\\core\\app.save_and_recall.js",
            "line": 208,
            "description": "Saves current app and environment states to a file. For the user, this looks like a download.",
            "itemtype": "method",
            "name": "saveAllToFile",
            "static": 1,
            "class": "APP.save_and_recall",
            "module": "CORE"
        },
        {
            "file": "src\\js\\core\\app.save_and_recall.js",
            "line": 230,
            "description": "Saves the active environment state to a file. For the user, this looks like a download.",
            "itemtype": "method",
            "name": "saveActiveEnvironmentStateToFile",
            "static": 1,
            "class": "APP.save_and_recall",
            "module": "CORE"
        },
        {
            "file": "src\\js\\alertify.js",
            "line": 17,
            "description": "Markup pieces",
            "type": "{Object}",
            "class": "HELPERS",
            "module": "CORE"
        },
        {
            "file": "src\\js\\alertify.js",
            "line": 33,
            "description": "Return the proper transitionend event",
            "return": {
                "description": "Transition type string",
                "type": "String"
            },
            "class": "HELPERS",
            "module": "CORE"
        },
        {
            "file": "src\\js\\alertify.js",
            "line": 63,
            "description": "Shorthand for document.getElementById()",
            "params": [
                {
                    "name": "id",
                    "description": "A specific element ID",
                    "type": "String"
                }
            ],
            "return": {
                "description": "HTML element",
                "type": "Object"
            },
            "class": "HELPERS",
            "module": "CORE"
        },
        {
            "file": "src\\js\\alertify.js",
            "line": 73,
            "description": "Alertify private object",
            "type": "{Object}",
            "class": "HELPERS",
            "module": "CORE"
        },
        {
            "file": "src\\js\\alertify.js",
            "line": 79,
            "description": "Labels object",
            "type": "{Object}",
            "class": "HELPERS",
            "module": "CORE"
        },
        {
            "file": "src\\js\\alertify.js",
            "line": 88,
            "description": "Delay number",
            "type": "{Number}",
            "class": "HELPERS",
            "module": "CORE"
        },
        {
            "file": "src\\js\\alertify.js",
            "line": 94,
            "description": "Whether buttons are reversed (default is secondary/primary)",
            "type": "{Boolean}",
            "class": "HELPERS",
            "module": "CORE"
        },
        {
            "file": "src\\js\\alertify.js",
            "line": 100,
            "description": "Which button should be focused by default",
            "type": "{String}\t\"ok\" (default), \"cancel\", or \"none\"",
            "class": "HELPERS",
            "module": "CORE"
        },
        {
            "file": "src\\js\\alertify.js",
            "line": 106,
            "description": "Set the transition event on load",
            "type": "{[type]}",
            "class": "HELPERS",
            "module": "CORE"
        },
        {
            "file": "src\\js\\alertify.js",
            "line": 112,
            "description": "Set the proper button click events",
            "params": [
                {
                    "name": "fn",
                    "description": "[Optional] Callback function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Undefined"
            },
            "class": "HELPERS",
            "module": "CORE"
        },
        {
            "file": "src\\js\\alertify.js",
            "line": 189,
            "description": "Bind events to elements",
            "params": [
                {
                    "name": "el",
                    "description": "HTML Object",
                    "type": "Object"
                },
                {
                    "name": "event",
                    "description": "Event to attach to element",
                    "type": "Event"
                },
                {
                    "name": "fn",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Undefined"
            },
            "class": "HELPERS",
            "module": "CORE"
        },
        {
            "file": "src\\js\\alertify.js",
            "line": 206,
            "description": "Use alertify as the global error handler (using window.onerror)",
            "return": {
                "description": "success",
                "type": "Boolean"
            },
            "class": "HELPERS",
            "module": "CORE"
        },
        {
            "file": "src\\js\\alertify.js",
            "line": 223,
            "description": "Append button HTML strings",
            "params": [
                {
                    "name": "secondary",
                    "description": "The secondary button HTML string",
                    "type": "String"
                },
                {
                    "name": "primary",
                    "description": "The primary button HTML string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The appended button HTML strings",
                "type": "String"
            },
            "class": "HELPERS",
            "module": "CORE"
        },
        {
            "file": "src\\js\\alertify.js",
            "line": 235,
            "description": "Build the proper message box",
            "params": [
                {
                    "name": "item",
                    "description": "Current object in the queue",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An HTML string of the message box",
                "type": "String"
            },
            "class": "HELPERS",
            "module": "CORE"
        },
        {
            "file": "src\\js\\alertify.js",
            "line": 291,
            "description": "Close the log messages",
            "params": [
                {
                    "name": "elem",
                    "description": "HTML Element of log message to close",
                    "type": "Object"
                },
                {
                    "name": "wait",
                    "description": "[optional] Time (in ms) to wait before automatically hiding the message, if 0 never hide",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Undefined"
            },
            "class": "HELPERS",
            "module": "CORE"
        },
        {
            "file": "src\\js\\alertify.js",
            "line": 340,
            "description": "Create a dialog box",
            "params": [
                {
                    "name": "message",
                    "description": "The message passed from the callee",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "Type of dialog to create",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "[Optional] Callback function",
                    "type": "Function"
                },
                {
                    "name": "placeholder",
                    "description": "[Optional] Default value for prompt input field",
                    "type": "String"
                },
                {
                    "name": "cssClass",
                    "description": "[Optional] Class(es) to append to dialog box",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "HELPERS",
            "module": "CORE"
        },
        {
            "file": "src\\js\\alertify.js",
            "line": 376,
            "description": "Extend the log method to create custom methods",
            "params": [
                {
                    "name": "type",
                    "description": "Custom method name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "HELPERS",
            "module": "CORE"
        },
        {
            "file": "src\\js\\alertify.js",
            "line": 391,
            "description": "Hide the dialog and rest to defaults",
            "return": {
                "description": "",
                "type": "Undefined"
            },
            "class": "HELPERS",
            "module": "CORE"
        },
        {
            "file": "src\\js\\alertify.js",
            "line": 426,
            "description": "Initialize Alertify\nCreate the 2 main elements",
            "return": {
                "description": "",
                "type": "Undefined"
            },
            "class": "HELPERS",
            "module": "CORE"
        },
        {
            "file": "src\\js\\alertify.js",
            "line": 468,
            "description": "Show a new log message box",
            "params": [
                {
                    "name": "message",
                    "description": "The message passed from the callee",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "[Optional] Optional type of log message",
                    "type": "String"
                },
                {
                    "name": "wait",
                    "description": "[Optional] Time (in ms) to wait before auto-hiding the log",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "HELPERS",
            "module": "CORE"
        },
        {
            "file": "src\\js\\alertify.js",
            "line": 493,
            "description": "Add new log message\nIf a type is passed, a class name \"alertify-log-{type}\" will get added.\nThis allows for custom look and feel for various types of notifications.",
            "params": [
                {
                    "name": "message",
                    "description": "The message passed from the callee",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "[Optional] Type of log message",
                    "type": "String"
                },
                {
                    "name": "wait",
                    "description": "[Optional] Time (in ms) to wait before auto-hiding",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Undefined"
            },
            "class": "HELPERS",
            "module": "CORE"
        },
        {
            "file": "src\\js\\alertify.js",
            "line": 515,
            "description": "Set properties",
            "params": [
                {
                    "name": "args",
                    "description": "Passing parameters",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Undefined"
            },
            "class": "HELPERS",
            "module": "CORE"
        },
        {
            "file": "src\\js\\alertify.js",
            "line": 534,
            "description": "Common place to set focus to proper element",
            "return": {
                "description": "",
                "type": "Undefined"
            },
            "class": "HELPERS",
            "module": "CORE"
        },
        {
            "file": "src\\js\\alertify.js",
            "line": 547,
            "description": "Initiate all the required pieces for the dialog box",
            "return": {
                "description": "",
                "type": "Undefined"
            },
            "class": "HELPERS",
            "module": "CORE"
        },
        {
            "file": "src\\js\\alertify.js",
            "line": 586,
            "description": "Unbind events to elements",
            "params": [
                {
                    "name": "el",
                    "description": "HTML Object",
                    "type": "Object"
                },
                {
                    "name": "event",
                    "description": "Event to detach to element",
                    "type": "Event"
                },
                {
                    "name": "fn",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Undefined"
            },
            "class": "HELPERS",
            "module": "CORE"
        },
        {
            "file": "src\\js\\helpers.js",
            "line": 64,
            "description": "Downloads a resource via AJAX, using the HTTP GET method.",
            "itemtype": "method",
            "name": "getWithAJAX",
            "params": [
                {
                    "name": "url",
                    "description": "URL of the resource.",
                    "type": "String"
                },
                {
                    "name": "success_callback",
                    "description": "Callback function to be called when resource is downloaded and ready. It gets the XMLHttpRequest object.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "http.send() Value of http.send()",
                "type": "Mixed"
            },
            "static": 1,
            "class": "HELPERS",
            "module": "HELPERS"
        },
        {
            "file": "src\\js\\helpers.js",
            "line": 96,
            "description": "Downloads a text resource via AJAX, using the HTTP GET method.",
            "itemtype": "method",
            "name": "getTextWithAJAX",
            "params": [
                {
                    "name": "url",
                    "description": "URL of the resource.",
                    "type": "String"
                },
                {
                    "name": "success_callback",
                    "description": "Callback function to be called when resource is downloaded and ready. It gets the resource as text string.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "http.send() Value of http.send()",
                "type": "Mixed"
            },
            "static": 1,
            "class": "HELPERS",
            "module": "HELPERS"
        },
        {
            "file": "src\\js\\helpers.js",
            "line": 114,
            "description": "Downloads a JSON resource via AJAX, using the HTTP GET method.",
            "itemtype": "method",
            "name": "getJSONWithAJAX",
            "params": [
                {
                    "name": "url",
                    "description": "URL of the resource.",
                    "type": "String"
                },
                {
                    "name": "success_callback",
                    "description": "Callback function to be called when resource is downloaded and ready. It gets the resulting javascript object, when JSON parsing was successful.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "http.send() Value of http.send()",
                "type": "Mixed"
            },
            "static": 1,
            "class": "HELPERS",
            "module": "HELPERS"
        },
        {
            "file": "src\\js\\helpers.js",
            "line": 131,
            "description": "Clones a javascript object (instead of just copying references of it).",
            "itemtype": "method",
            "name": "cloneObject",
            "params": [
                {
                    "name": "obj",
                    "description": "Source object.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "clone Clone of the object",
                "type": "Mixed"
            },
            "static": 1,
            "class": "HELPERS",
            "module": "HELPERS"
        },
        {
            "file": "src\\js\\helpers.js",
            "line": 158,
            "description": "Parses a Javascript Blob object for its text. This obviously works only with text files.",
            "itemtype": "method",
            "name": "readFileAsText",
            "params": [
                {
                    "name": "file",
                    "description": "File as Blob object.",
                    "type": "Mixed"
                },
                {
                    "name": "onsuccess",
                    "description": "Callback function to be called when file is parsed. It gets the resulting string, if parsing was successful.",
                    "type": "Function"
                }
            ],
            "static": 1,
            "class": "HELPERS",
            "module": "HELPERS"
        },
        {
            "file": "src\\js\\helpers.js",
            "line": 518,
            "description": "Remove an element and provide a function that inserts it into its original position",
            "params": [
                {
                    "name": "element",
                    "description": "The element to be temporarily removed",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "A function that inserts the element into its original position",
                "type": "Function"
            },
            "class": "HELPERS",
            "module": "HELPERS"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type",
            "line": " src\\js\\core\\app.gui.pager.js:70"
        },
        {
            "message": "Missing item type\nMarkup pieces",
            "line": " src\\js\\alertify.js:17"
        },
        {
            "message": "Missing item type\nReturn the proper transitionend event",
            "line": " src\\js\\alertify.js:33"
        },
        {
            "message": "Missing item type\nShorthand for document.getElementById()",
            "line": " src\\js\\alertify.js:63"
        },
        {
            "message": "Missing item type\nAlertify private object",
            "line": " src\\js\\alertify.js:73"
        },
        {
            "message": "Missing item type\nLabels object",
            "line": " src\\js\\alertify.js:79"
        },
        {
            "message": "Missing item type\nDelay number",
            "line": " src\\js\\alertify.js:88"
        },
        {
            "message": "Missing item type\nWhether buttons are reversed (default is secondary/primary)",
            "line": " src\\js\\alertify.js:94"
        },
        {
            "message": "Missing item type\nWhich button should be focused by default",
            "line": " src\\js\\alertify.js:100"
        },
        {
            "message": "Missing item type\nSet the transition event on load",
            "line": " src\\js\\alertify.js:106"
        },
        {
            "message": "Missing item type\nSet the proper button click events",
            "line": " src\\js\\alertify.js:112"
        },
        {
            "message": "Missing item type\nBind events to elements",
            "line": " src\\js\\alertify.js:189"
        },
        {
            "message": "Missing item type\nUse alertify as the global error handler (using window.onerror)",
            "line": " src\\js\\alertify.js:206"
        },
        {
            "message": "Missing item type\nAppend button HTML strings",
            "line": " src\\js\\alertify.js:223"
        },
        {
            "message": "Missing item type\nBuild the proper message box",
            "line": " src\\js\\alertify.js:235"
        },
        {
            "message": "Missing item type\nClose the log messages",
            "line": " src\\js\\alertify.js:291"
        },
        {
            "message": "Missing item type\nCreate a dialog box",
            "line": " src\\js\\alertify.js:340"
        },
        {
            "message": "Missing item type\nExtend the log method to create custom methods",
            "line": " src\\js\\alertify.js:376"
        },
        {
            "message": "Missing item type\nHide the dialog and rest to defaults",
            "line": " src\\js\\alertify.js:391"
        },
        {
            "message": "Missing item type\nInitialize Alertify\nCreate the 2 main elements",
            "line": " src\\js\\alertify.js:426"
        },
        {
            "message": "Missing item type\nShow a new log message box",
            "line": " src\\js\\alertify.js:468"
        },
        {
            "message": "Missing item type\nAdd new log message\nIf a type is passed, a class name \"alertify-log-{type}\" will get added.\nThis allows for custom look and feel for various types of notifications.",
            "line": " src\\js\\alertify.js:493"
        },
        {
            "message": "Missing item type\nSet properties",
            "line": " src\\js\\alertify.js:515"
        },
        {
            "message": "Missing item type\nCommon place to set focus to proper element",
            "line": " src\\js\\alertify.js:534"
        },
        {
            "message": "Missing item type\nInitiate all the required pieces for the dialog box",
            "line": " src\\js\\alertify.js:547"
        },
        {
            "message": "Missing item type\nUnbind events to elements",
            "line": " src\\js\\alertify.js:586"
        },
        {
            "message": "Missing item type\nRemove an element and provide a function that inserts it into its original position",
            "line": " src\\js\\helpers.js:518"
        }
    ]
}